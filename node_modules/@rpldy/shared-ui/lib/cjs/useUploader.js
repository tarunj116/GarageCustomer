"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _shared = require("@rpldy/shared");

var _uploader = _interopRequireDefault(require("@rpldy/uploader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (options, listeners) => {
  //avoid creating new instance of uploader (unless enhancer method changed)
  const uploader = (0, _react.useMemo)(() => {
    _shared.logger.debugLog("Uploady creating a new uploader instance", options);

    return (0, _uploader.default)(options);
  }, //dont recreate the uploader when options changed - we do update later
  //eslint-disable-next-line react-hooks/exhaustive-deps
  [options.enhancer]); //Forgoing any kind of memoization. Probably not worth the comparison work to save on the options merge

  uploader.update(options);
  (0, _react.useEffect)(() => {
    if (listeners) {
      _shared.logger.debugLog("Uploady setting event listeners", listeners);

      Object.entries(listeners).forEach(([name, m]) => {
        uploader.on(name, m);
      });
    }

    return () => {
      if (listeners) {
        _shared.logger.debugLog("Uploady removing event listeners", listeners);

        Object.entries(listeners).forEach(([name, m]) => uploader.off(name, m));
      }
    };
  }, [listeners, uploader]);
  return uploader;
};

exports.default = _default;