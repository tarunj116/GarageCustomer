"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _shared = require("@rpldy/shared");

var _UploadyContext = _interopRequireWildcard(require("./UploadyContext"));

var _useUploader = _interopRequireDefault(require("./useUploader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NoDomUploady = props => {
  const {
    listeners,
    debug,
    children,
    inputRef,
    ...uploadOptions
  } = props;

  _shared.logger.setDebug(!!debug);

  _shared.logger.debugLog("@@@@@@ Uploady Rendering @@@@@@", props);

  const uploader = (0, _useUploader.default)(uploadOptions, listeners);
  const api = (0, _react.useMemo)(() => (0, _UploadyContext.createContextApi)(uploader, inputRef), [uploader, inputRef]);
  return /*#__PURE__*/_react.default.createElement(_UploadyContext.default.Provider, {
    value: api
  }, children);
};

var _default = NoDomUploady;
exports.default = _default;