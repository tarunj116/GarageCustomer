"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIsUploadOptionsComponent = exports.markAsUploadOptionsComponent = exports.logWarning = exports.generateUploaderEventHookWithState = exports.generateUploaderEventHook = void 0;

var _react = require("react");

var _shared = require("@rpldy/shared");

var _consts = require("./consts");

var _useUploadyContext = _interopRequireDefault(require("./useUploadyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const useEventEffect = (event, fn) => {
  const context = (0, _useUploadyContext.default)();
  const {
    on,
    off
  } = context;
  (0, _react.useEffect)(() => {
    on(event, fn);
    return () => {
      off(event, fn);
    };
  }, [event, fn, on, off]);
};

const generateUploaderEventHookWithState = (event, stateCalculator) => (fn, id) => {
  const [eventState, setEventState] = (0, _react.useState)(null);
  const eventCallback = (0, _react.useCallback)((eventObj, ...args) => {
    if (!id || eventObj.id === id) {
      setEventState(stateCalculator(eventObj, ...args));

      if (fn) {
        fn(eventObj, ...args);
      }
    }
  }, [fn, id]);
  useEventEffect(event, eventCallback);
  return eventState;
};

exports.generateUploaderEventHookWithState = generateUploaderEventHookWithState;

const generateUploaderEventHook = (event, canScope = true) => (fn, id) => {
  const eventCallback = (0, _react.useCallback)((eventObj, ...args) => {
    return fn && (!canScope || !id || eventObj.id === id) ? fn(eventObj, ...args) : undefined;
  }, [fn, id]);
  useEventEffect(event, eventCallback);
};

exports.generateUploaderEventHook = generateUploaderEventHook;

const logWarning = (condition, msg) => {
  if (!(0, _shared.isProduction)() && !condition) {
    // eslint-disable-next-line no-console
    console.warn(msg);
  }
};

exports.logWarning = logWarning;

const markAsUploadOptionsComponent = Component => {
  Component[_consts.UPLOAD_OPTIONS_COMP] = true;
};

exports.markAsUploadOptionsComponent = markAsUploadOptionsComponent;

const getIsUploadOptionsComponent = Component => {
  var _Component$target, _Component$render;

  return Component[_consts.UPLOAD_OPTIONS_COMP] === true || ((_Component$target = Component.target) === null || _Component$target === void 0 ? void 0 : _Component$target[_consts.UPLOAD_OPTIONS_COMP]) === true || ((_Component$render = Component.render) === null || _Component$render === void 0 ? void 0 : _Component$render[_consts.UPLOAD_OPTIONS_COMP]) === true;
};

exports.getIsUploadOptionsComponent = getIsUploadOptionsComponent;