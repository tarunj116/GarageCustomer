"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _uploader = require("@rpldy/uploader");

var _useUploadyContext = _interopRequireDefault(require("./useUploadyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = Component => props => {
  const context = (0, _useUploadyContext.default)();
  const {
    id
  } = props;
  const [updater, setUpdater] = (0, _react.useState)({
    update: null,
    data: null
  }); //need layout effect to register for REQUEST_PRE_SEND in time (block)

  (0, _react.useLayoutEffect)(() => {
    const handleRequestPreSend = requestData => requestData.items.find(item => item.id === id) && new Promise(resolve => {
      setUpdater(() => ({
        update: data => {
          //unregister handler so this instance doesnt continue listening unnecessarily
          context.off(_uploader.UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);
          resolve(data);
        },
        data: requestData
      }));
    });

    if (id) {
      context.on(_uploader.UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);
    }

    return () => {
      if (id) {
        context.off(_uploader.UPLOADER_EVENTS.REQUEST_PRE_SEND, handleRequestPreSend);
      }
    };
  }, [context, id]);
  return /*#__PURE__*/_react.default.createElement(Component, _extends({}, props, {
    updateRequest: updater.update,
    requestData: updater.data
  }));
};

exports.default = _default;