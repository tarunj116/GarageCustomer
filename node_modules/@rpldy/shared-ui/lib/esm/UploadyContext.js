import React from "react";
import { logger, invariant } from "@rpldy/shared";
import { registerUploadyContextVersion } from "./uploadyVersion";
const UploadyContext = /*#__PURE__*/React.createContext(null);
const NO_INPUT_ERROR_MSG = "Uploady - Context. File input isn't available";
export const createContextApi = (uploader, internalInputRef) => {
  let fileInputRef, showFileUploadOptions;
  let isUsingExternalInput = false;

  if (internalInputRef) {
    fileInputRef = internalInputRef;
  } else {
    logger.debugLog("Uploady context - didn't receive input field ref - waiting for external ref");
  }

  const getInputField = () => {
    var _fileInputRef;

    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;
  };

  const getInternalFileInput = () => {
    //retrieving the internal file input in userland means Uploady considers the input as custom from now on
    if (fileInputRef) {
      isUsingExternalInput = true;
    }

    return fileInputRef;
  };

  const getIsUsingExternalInput = () => isUsingExternalInput;

  const onFileInputChange = () => {
    const input = getInputField();
    invariant(input, NO_INPUT_ERROR_MSG);
    input.removeEventListener("change", onFileInputChange);
    const addOptions = showFileUploadOptions;
    showFileUploadOptions = null;
    upload(input.files, addOptions);
  };

  const upload = (files, addOptions) => {
    uploader.add(files, addOptions);
  };

  //We register the version on the global object to be able to warn devs when they're using packages from different uploady versions
  //causing the context not to be available
  registerUploadyContextVersion();
  return {
    hasUploader: () => !!uploader,
    getInternalFileInput,
    setExternalFileInput: extRef => {
      isUsingExternalInput = true;
      fileInputRef = extRef;
    },
    getIsUsingExternalInput,
    showFileUpload: addOptions => {
      const input = getInputField();
      invariant(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options

      showFileUploadOptions = addOptions;
      input.removeEventListener("change", onFileInputChange);
      input.addEventListener("change", onFileInputChange); //clear the input value so same file can be uploaded again

      input.value = "";
      input.click();
    },
    upload,
    processPending: uploadOptions => {
      uploader.upload(uploadOptions);
    },
    clearPending: () => {
      uploader.clearPending();
    },
    setOptions: options => {
      uploader.update(options);
    },
    getOptions: () => {
      return uploader.getOptions();
    },
    getExtension: name => {
      return uploader.getExtension(name);
    },
    abort: itemId => {
      uploader.abort(itemId);
    },
    abortBatch: batchId => {
      uploader.abortBatch(batchId);
    },
    on: (name, cb) => {
      return uploader.on(name, cb);
    },
    once: (name, cb) => {
      return uploader.once(name, cb);
    },
    off: (name, cb) => {
      return uploader.off(name, cb);
    }
  };
};
export default UploadyContext;