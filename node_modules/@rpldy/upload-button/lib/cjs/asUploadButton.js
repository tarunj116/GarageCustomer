"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _sharedUi = require("@rpldy/shared-ui");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const asUploadButton = Component => {
  const AsUploadButton = (props, ref) => {
    const {
      showFileUpload
    } = (0, _sharedUi.useUploadyContext)();
    const {
      id,
      className,
      text,
      children,
      extraProps,
      onClick,
      ...uploadOptions
    } = props; //using ref so onButtonClick can stay memoized

    const uploadOptionsRef = (0, _react.useRef)();
    uploadOptionsRef.current = uploadOptions;
    const onButtonClick = (0, _react.useCallback)(e => {
      showFileUpload(uploadOptionsRef.current);
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
    }, [showFileUpload, uploadOptionsRef, onClick]);
    return /*#__PURE__*/_react.default.createElement(Component, _extends({
      ref: ref,
      onClick: onButtonClick,
      id: id,
      className: className,
      children: children || text || "Upload"
    }, extraProps));
  };

  (0, _sharedUi.markAsUploadOptionsComponent)(AsUploadButton);
  return /*#__PURE__*/(0, _react.forwardRef)(AsUploadButton);
};

var _default = asUploadButton;
exports.default = _default;