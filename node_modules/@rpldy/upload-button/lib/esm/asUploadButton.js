function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useCallback, useRef } from "react";
import { markAsUploadOptionsComponent, useUploadyContext } from "@rpldy/shared-ui";

const asUploadButton = Component => {
  const AsUploadButton = (props, ref) => {
    const {
      showFileUpload
    } = useUploadyContext();
    const {
      id,
      className,
      text,
      children,
      extraProps,
      onClick,
      ...uploadOptions
    } = props; //using ref so onButtonClick can stay memoized

    const uploadOptionsRef = useRef();
    uploadOptionsRef.current = uploadOptions;
    const onButtonClick = useCallback(e => {
      showFileUpload(uploadOptionsRef.current);
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
    }, [showFileUpload, uploadOptionsRef, onClick]);
    return /*#__PURE__*/React.createElement(Component, _extends({
      ref: ref,
      onClick: onButtonClick,
      id: id,
      className: className,
      children: children || text || "Upload"
    }, extraProps));
  };

  markAsUploadOptionsComponent(AsUploadButton);
  return /*#__PURE__*/forwardRef(AsUploadButton);
};

export default asUploadButton;