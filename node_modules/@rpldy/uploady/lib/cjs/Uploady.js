"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _shared = require("@rpldy/shared");

var _sharedUi = require("@rpldy/shared-ui");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const NO_CONTAINER_ERROR_MSG = "Uploady - Container for file input must be a valid dom element";

const renderInput = (inputProps, instanceOptions, ref) => /*#__PURE__*/_react.default.createElement("input", _extends({}, inputProps, {
  name: instanceOptions.inputFieldName,
  type: "file",
  ref: ref
}));

const renderInPortal = (container, isValidContainer, inputProps, instanceOptions, ref) => container && isValidContainer ? /*#__PURE__*/_reactDom.default.createPortal(renderInput(inputProps, instanceOptions, ref), container) : null;

const FileInputField = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(({
  container,
  noPortal,
  ...inputProps
}, ref) => {
  const instanceOptions = (0, _sharedUi.useUploadOptions)();
  const isValidContainer = container && container.nodeType === 1;
  (0, _shared.invariant)(isValidContainer || !(0, _shared.hasWindow)(), NO_CONTAINER_ERROR_MSG); // In DEV - SSR React will warn on mismatch between client&server :( -
  // https://github.com/facebook/react/issues/12615
  // https://github.com/facebook/react/issues/13097

  return noPortal ? renderInput(inputProps, instanceOptions, ref) : renderInPortal(container, isValidContainer, inputProps, instanceOptions, ref);
}));

const Uploady = props => {
  const {
    multiple = true,
    capture,
    accept,
    webkitdirectory,
    children,
    inputFieldContainer,
    customInput,
    fileInputId,
    noPortal = false,
    ...noDomProps
  } = props;
  const container = !customInput ? inputFieldContainer || ((0, _shared.hasWindow)() ? document.body : null) : null;
  const internalInputFieldRef = (0, _react.useRef)();
  return /*#__PURE__*/_react.default.createElement(_sharedUi.NoDomUploady, _extends({}, noDomProps, {
    inputRef: internalInputFieldRef
  }), !customInput ? /*#__PURE__*/_react.default.createElement(FileInputField, {
    container: container,
    multiple: multiple,
    capture: capture,
    accept: accept,
    webkitdirectory: webkitdirectory,
    style: {
      display: "none"
    },
    ref: internalInputFieldRef,
    id: fileInputId,
    noPortal: noPortal
  }) : null, children);
};

var _default = Uploady;
exports.default = _default;