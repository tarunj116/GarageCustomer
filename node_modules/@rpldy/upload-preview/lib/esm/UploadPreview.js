function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useEffect, useImperativeHandle } from "react";
import usePreviewsLoader from "./usePreviewsLoader";
import { getFallbackUrlData } from "./utils";
import { PREVIEW_TYPES } from "./consts";

const showBasicPreview = (type, url, previewProps, onImgError) => type === PREVIEW_TYPES.VIDEO ? /*#__PURE__*/React.createElement("video", _extends({
  key: url,
  src: url,
  controls: true
}, previewProps)) : /*#__PURE__*/React.createElement("img", _extends({
  key: url,
  onError: onImgError,
  src: url
}, previewProps));

const usePreviewMethods = (previews, clearPreviews, previewMethodsRef, onPreviewsChanged) => {
  useImperativeHandle(previewMethodsRef, () => ({
    clear: clearPreviews
  }), [clearPreviews]);
  useEffect(() => {
    if (onPreviewsChanged) {
      onPreviewsChanged(previews);
    }
  }, [previews, onPreviewsChanged]);
};

const UploadPreview = props => {
  const {
    PreviewComponent,
    previewMethodsRef,
    onPreviewsChanged,
    ...previewOptions
  } = props;
  const {
    previews,
    clearPreviews
  } = usePreviewsLoader(previewOptions);
  const onImagePreviewLoadError = useCallback(e => {
    const img = e.target;
    const fallback = getFallbackUrlData(props.fallbackUrl, img.src);

    if (fallback) {
      img.src = fallback.url;
    }
  }, [props.fallbackUrl]);
  usePreviewMethods(previews, clearPreviews, previewMethodsRef, onPreviewsChanged);
  return previews.map(data => {
    const {
      id,
      url,
      type,
      name,
      isFallback,
      props: previewProps
    } = data;
    return PreviewComponent ? /*#__PURE__*/React.createElement(PreviewComponent, _extends({
      key: id + url,
      id: id,
      url: url,
      type: type,
      name: name,
      isFallback: isFallback
    }, previewProps)) : showBasicPreview(type, url, previewProps, onImagePreviewLoadError);
  });
};

export default UploadPreview;