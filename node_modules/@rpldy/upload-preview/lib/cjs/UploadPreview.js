"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _usePreviewsLoader = _interopRequireDefault(require("./usePreviewsLoader"));

var _utils = require("./utils");

var _consts = require("./consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const showBasicPreview = (type, url, previewProps, onImgError) => type === _consts.PREVIEW_TYPES.VIDEO ? /*#__PURE__*/_react.default.createElement("video", _extends({
  key: url,
  src: url,
  controls: true
}, previewProps)) : /*#__PURE__*/_react.default.createElement("img", _extends({
  key: url,
  onError: onImgError,
  src: url
}, previewProps));

const usePreviewMethods = (previews, clearPreviews, previewMethodsRef, onPreviewsChanged) => {
  (0, _react.useImperativeHandle)(previewMethodsRef, () => ({
    clear: clearPreviews
  }), [clearPreviews]);
  (0, _react.useEffect)(() => {
    if (onPreviewsChanged) {
      onPreviewsChanged(previews);
    }
  }, [previews, onPreviewsChanged]);
};

const UploadPreview = props => {
  const {
    PreviewComponent,
    previewMethodsRef,
    onPreviewsChanged,
    ...previewOptions
  } = props;
  const {
    previews,
    clearPreviews
  } = (0, _usePreviewsLoader.default)(previewOptions);
  const onImagePreviewLoadError = (0, _react.useCallback)(e => {
    const img = e.target;
    const fallback = (0, _utils.getFallbackUrlData)(props.fallbackUrl, img.src);

    if (fallback) {
      img.src = fallback.url;
    }
  }, [props.fallbackUrl]);
  usePreviewMethods(previews, clearPreviews, previewMethodsRef, onPreviewsChanged);
  return previews.map(data => {
    const {
      id,
      url,
      type,
      name,
      isFallback,
      props: previewProps
    } = data;
    return PreviewComponent ? /*#__PURE__*/_react.default.createElement(PreviewComponent, _extends({
      key: id + url,
      id: id,
      url: url,
      type: type,
      name: name,
      isFallback: isFallback
    }, previewProps)) : showBasicPreview(type, url, previewProps, onImagePreviewLoadError);
  });
};

var _default = UploadPreview;
exports.default = _default;