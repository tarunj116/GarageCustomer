"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepProxyUnwrap = exports.getIsFileList = exports.getMandatoryOptions = void 0;

var _shared = require("@rpldy/shared");

var _simpleState = require("@rpldy/simple-state");

var _defaults = require("./defaults");

const FILE_LIST_SUPPORT = (0, _shared.hasWindow)() && "FileList" in window;

const getMandatoryDestination = dest => {
  return {
    params: {},
    ...dest
  };
};

const getMandatoryOptions = options => {
  return { ..._defaults.DEFAULT_OPTIONS,
    ...options,
    destination: options && options.destination ? getMandatoryDestination(options.destination) : null
  };
};

exports.getMandatoryOptions = getMandatoryOptions;

const getIsFileList = files => //in case files list was created in a different context(window) need to check toString
FILE_LIST_SUPPORT && files instanceof FileList || files.toString() === "[object FileList]";
/***
 * will unwrap object from proxy
 * if obj itself isnt a proxy, will look for a proxy max 2 levels deep
 */


exports.getIsFileList = getIsFileList;

const deepProxyUnwrap = (obj, level = 0) => {
  let result = obj;

  if (!(0, _shared.isProduction)()) {
    if (level < 3 && (0, _simpleState.isProxy)(obj)) {
      result = (0, _simpleState.unwrap)(obj);
    } else if (level < 3 && (0, _simpleState.isProxiable)(obj)) {
      result = Array.isArray(obj) ? Object.keys(obj).map(key => deepProxyUnwrap(obj[key])) : Object.keys(obj).reduce((res, key) => {
        res[key] = deepProxyUnwrap(obj[key], level + 1);
        return res;
      }, {});
    }
  }

  return result;
};

exports.deepProxyUnwrap = deepProxyUnwrap;