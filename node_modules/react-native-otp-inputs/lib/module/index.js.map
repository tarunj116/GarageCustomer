{"version":3,"sources":["index.tsx"],"names":["Clipboard","React","forwardRef","useCallback","useEffect","useImperativeHandle","useReducer","useRef","Keyboard","Platform","StyleSheet","View","OtpInput","OtpInputsRef","fillOtpCode","reducer","supportAutofillFromClipboard","OS","parseInt","Version","styles","create","container","flex","flexDirection","alignItems","justifyContent","OtpInputs","autofillFromClipboard","autofillListenerIntervalMS","autoCapitalize","clearTextOnFocus","defaultValue","focusStyles","handleChange","console","log","inputContainerStyles","inputStyles","isRTL","keyboardType","numberOfInputs","placeholder","secureTextEntry","selectTextOnFocus","style","testIDPrefix","restProps","ref","previousCopiedText","inputs","otpCode","hasKeySupport","dispatch","type","payload","reset","current","forEach","input","clear","setString","focus","firstInput","handleInputTextChange","text","index","length","handleClearInput","dismiss","fillInputs","focusInput","handleTextChange","handleKeyPress","nativeEvent","key","isNaN","inputIndex","code","listenOnCopiedText","copiedText","getString","otpCodeValue","Object","values","join","interval","setInterval","clearInterval","renderInputs","iterationArray","Array","fill","map","_","inputValue","createRef","keyPressEvent","select","android","ios"],"mappings":"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","sourcesContent":["import Clipboard from '@react-native-clipboard/clipboard';\nimport React, {\n  RefObject,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  Keyboard,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport OtpInput from './OtpInput';\nimport { OtpInputsRef, SupportedKeyboardType } from './types';\nimport { fillOtpCode } from './helpers';\nimport reducer from './reducer';\n\nconst supportAutofillFromClipboard =\n  Platform.OS === 'android' || parseInt(Platform.Version as string, 10) < 14;\n\ntype Props = TextInputProps & {\n  autofillFromClipboard: boolean;\n  autofillListenerIntervalMS?: number;\n  keyboardType?: SupportedKeyboardType;\n  style?: StyleProp<ViewStyle>;\n  focusStyles?: StyleProp<ViewStyle>;\n  defaultValue?: string;\n  handleChange: (otpCode: string) => void;\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  isRTL?: boolean;\n  numberOfInputs: number;\n  testIDPrefix?: string;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n});\n\nconst OtpInputs = forwardRef<OtpInputsRef, Props>(\n  (\n    {\n      autofillFromClipboard = supportAutofillFromClipboard,\n      autofillListenerIntervalMS = 1000,\n      autoCapitalize = 'none',\n      clearTextOnFocus = false,\n      defaultValue,\n      focusStyles,\n      handleChange = console.log,\n      inputContainerStyles,\n      inputStyles,\n      isRTL = false,\n      keyboardType = 'phone-pad',\n      numberOfInputs = 4,\n      placeholder = '',\n      secureTextEntry = false,\n      selectTextOnFocus = true,\n      style,\n      testIDPrefix = 'otpInput',\n      ...restProps\n    },\n    ref,\n  ) => {\n    const previousCopiedText = useRef<string>('');\n    const inputs = useRef<Array<RefObject<TextInput>>>([]);\n    const [{ otpCode, hasKeySupport }, dispatch] = useReducer(\n      reducer,\n      {},\n      () => ({\n        otpCode: fillOtpCode(numberOfInputs, defaultValue),\n        handleChange,\n        hasKeySupport: Platform.OS === 'ios',\n      }),\n    );\n\n    useEffect(() => {\n      dispatch({ type: 'setHandleChange', payload: handleChange });\n    }, [handleChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        reset: (): void => {\n          dispatch({ type: 'clearOtp', payload: numberOfInputs });\n          inputs.current.forEach((input) => input?.current?.clear());\n          previousCopiedText.current = '';\n          Clipboard.setString('');\n        },\n        focus: (): void => {\n          const firstInput = inputs.current[0];\n          firstInput?.current?.focus();\n        },\n      }),\n      [numberOfInputs],\n    );\n\n    const handleInputTextChange = (text: string, index: number): void => {\n      if (!text.length) {\n        handleClearInput(index);\n      }\n\n      if (text.length > 1) {\n        handleClearInput(index);\n        Keyboard.dismiss();\n        return fillInputs(text);\n      }\n\n      if (text) {\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            text,\n            index,\n          },\n        });\n        focusInput(index + 1);\n      }\n\n      if (index === numberOfInputs - 1 && text) {\n        Keyboard.dismiss();\n      }\n    };\n\n    const handleTextChange = (text: string, index: number) => {\n      if (\n        (Platform.OS === 'android' && !hasKeySupport) ||\n        // Pasted from input accessory\n        (Platform.OS === 'ios' && text.length > 1)\n      ) {\n        handleInputTextChange(text, index);\n      }\n    };\n\n    const handleKeyPress = (\n      {\n        nativeEvent: { key },\n      }: NativeSyntheticEvent<TextInputKeyPressEventData>,\n      index: number,\n    ) => {\n      handleInputTextChange(key === 'Backspace' ? '' : key, index);\n\n      if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key)))\n        dispatch({ type: 'setHasKeySupport', payload: true });\n    };\n\n    const focusInput = useCallback(\n      (index: number): void => {\n        if (index >= 0 && index < numberOfInputs) {\n          const input = inputs.current[index];\n          input?.current?.focus();\n        }\n      },\n      [numberOfInputs],\n    );\n\n    const handleClearInput = useCallback(\n      (inputIndex: number) => {\n        const input = inputs.current[inputIndex];\n        input?.current?.clear();\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            index: inputIndex,\n            text: '',\n          },\n        });\n        focusInput(inputIndex - 1);\n      },\n      [focusInput],\n    );\n\n    const fillInputs = useCallback(\n      (code: string) => {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code },\n        });\n      },\n      [numberOfInputs],\n    );\n\n    const listenOnCopiedText = useCallback(async (): Promise<void> => {\n      const copiedText = await Clipboard.getString();\n      const otpCodeValue = Object.values(otpCode).join('');\n\n      if (\n        copiedText &&\n        copiedText.length === numberOfInputs &&\n        copiedText !== otpCodeValue &&\n        copiedText !== previousCopiedText.current\n      ) {\n        previousCopiedText.current = copiedText;\n        fillInputs(copiedText);\n      }\n    }, [fillInputs, numberOfInputs, otpCode]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (autofillFromClipboard) {\n        interval = setInterval(() => {\n          listenOnCopiedText();\n        }, autofillListenerIntervalMS);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [\n      autofillFromClipboard,\n      autofillListenerIntervalMS,\n      listenOnCopiedText,\n      numberOfInputs,\n    ]);\n\n    const renderInputs = (): Array<JSX.Element> => {\n      const iterationArray = Array<number>(numberOfInputs).fill(0);\n\n      return iterationArray.map((_, index) => {\n        let inputIndex = index;\n        if (isRTL) {\n          inputIndex = numberOfInputs - 1 - index;\n        }\n        const inputValue = otpCode[`${inputIndex}`];\n\n        if (!inputs.current[inputIndex]) {\n          inputs.current[inputIndex] = React.createRef<TextInput>();\n        }\n\n        return (\n          <OtpInput\n            autoCapitalize={autoCapitalize}\n            clearTextOnFocus={clearTextOnFocus}\n            firstInput={index === 0}\n            focusStyles={focusStyles}\n            handleKeyPress={(\n              keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>,\n            ) => handleKeyPress(keyPressEvent, inputIndex)}\n            handleTextChange={(text: string) =>\n              handleTextChange(text, inputIndex)\n            }\n            inputContainerStyles={inputContainerStyles}\n            inputStyles={inputStyles}\n            inputValue={inputValue}\n            key={inputIndex}\n            keyboardType={keyboardType}\n            maxLength={Platform.select({\n              android: 1,\n              ios: index === 0 ? numberOfInputs : 1,\n            })}\n            numberOfInputs={numberOfInputs}\n            placeholder={placeholder}\n            ref={inputs.current[inputIndex]}\n            secureTextEntry={secureTextEntry}\n            selectTextOnFocus={selectTextOnFocus}\n            testID={`${testIDPrefix}-${inputIndex}`}\n            {...restProps}\n          />\n        );\n      });\n    };\n\n    return <View style={style || styles.container}>{renderInputs()}</View>;\n  },\n);\n\nexport { OtpInputsRef };\nexport default OtpInputs;\n"]}