{"version":3,"sources":["index.tsx"],"names":["supportAutofillFromClipboard","Platform","OS","parseInt","Version","styles","StyleSheet","create","container","flex","flexDirection","alignItems","justifyContent","OtpInputs","autofillFromClipboard","autofillListenerIntervalMS","autoCapitalize","clearTextOnFocus","defaultValue","focusStyles","handleChange","console","log","inputContainerStyles","inputStyles","isRTL","keyboardType","numberOfInputs","placeholder","secureTextEntry","selectTextOnFocus","style","testIDPrefix","restProps","ref","previousCopiedText","inputs","otpCode","hasKeySupport","dispatch","reducer","type","payload","reset","current","forEach","input","clear","Clipboard","setString","focus","firstInput","handleInputTextChange","text","index","length","handleClearInput","Keyboard","dismiss","fillInputs","focusInput","handleTextChange","handleKeyPress","nativeEvent","key","isNaN","inputIndex","code","listenOnCopiedText","copiedText","getString","otpCodeValue","Object","values","join","interval","setInterval","clearInterval","renderInputs","iterationArray","Array","fill","map","_","inputValue","React","createRef","keyPressEvent","select","android","ios"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AASA;;AAcA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,4BAA4B,GAChCC,sBAASC,EAAT,KAAgB,SAAhB,IAA6BC,QAAQ,CAACF,sBAASG,OAAV,EAA6B,EAA7B,CAAR,GAA2C,EAD1E;;AAkBA,MAAMC,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;;AASA,MAAMC,SAAS,gBAAG,uBAChB,CACE;AACEC,EAAAA,qBAAqB,GAAGd,4BAD1B;AAEEe,EAAAA,0BAA0B,GAAG,IAF/B;AAGEC,EAAAA,cAAc,GAAG,MAHnB;AAIEC,EAAAA,gBAAgB,GAAG,KAJrB;AAKEC,EAAAA,YALF;AAMEC,EAAAA,WANF;AAOEC,EAAAA,YAAY,GAAGC,OAAO,CAACC,GAPzB;AAQEC,EAAAA,oBARF;AASEC,EAAAA,WATF;AAUEC,EAAAA,KAAK,GAAG,KAVV;AAWEC,EAAAA,YAAY,GAAG,WAXjB;AAYEC,EAAAA,cAAc,GAAG,CAZnB;AAaEC,EAAAA,WAAW,GAAG,EAbhB;AAcEC,EAAAA,eAAe,GAAG,KAdpB;AAeEC,EAAAA,iBAAiB,GAAG,IAftB;AAgBEC,EAAAA,KAhBF;AAiBEC,EAAAA,YAAY,GAAG,UAjBjB;AAkBE,KAAGC;AAlBL,CADF,EAqBEC,GArBF,KAsBK;AACH,QAAMC,kBAAkB,GAAG,mBAAe,EAAf,CAA3B;AACA,QAAMC,MAAM,GAAG,mBAAoC,EAApC,CAAf;AACA,QAAM,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAA6BC,QAA7B,IAAyC,uBAC7CC,gBAD6C,EAE7C,EAF6C,EAG7C,OAAO;AACLH,IAAAA,OAAO,EAAE,0BAAYV,cAAZ,EAA4BT,YAA5B,CADJ;AAELE,IAAAA,YAFK;AAGLkB,IAAAA,aAAa,EAAErC,sBAASC,EAAT,KAAgB;AAH1B,GAAP,CAH6C,CAA/C;AAUA,wBAAU,MAAM;AACdqC,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAEtB;AAApC,KAAD,CAAR;AACD,GAFD,EAEG,CAACA,YAAD,CAFH;AAIA,kCACEc,GADF,EAEE,OAAO;AACLS,IAAAA,KAAK,EAAE,MAAY;AACjBJ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,OAAO,EAAEf;AAA7B,OAAD,CAAR;AACAS,MAAAA,MAAM,CAACQ,OAAP,CAAeC,OAAf,CAAwBC,KAAD;AAAA;;AAAA,eAAWA,KAAX,aAAWA,KAAX,yCAAWA,KAAK,CAAEF,OAAlB,mDAAW,eAAgBG,KAAhB,EAAX;AAAA,OAAvB;AACAZ,MAAAA,kBAAkB,CAACS,OAAnB,GAA6B,EAA7B;;AACAI,yBAAUC,SAAV,CAAoB,EAApB;AACD,KANI;AAOLC,IAAAA,KAAK,EAAE,MAAY;AAAA;;AACjB,YAAMC,UAAU,GAAGf,MAAM,CAACQ,OAAP,CAAe,CAAf,CAAnB;AACAO,MAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,mCAAAA,UAAU,CAAEP,OAAZ,4EAAqBM,KAArB;AACD;AAVI,GAAP,CAFF,EAcE,CAACvB,cAAD,CAdF;;AAiBA,QAAMyB,qBAAqB,GAAG,CAACC,IAAD,EAAeC,KAAf,KAAuC;AACnE,QAAI,CAACD,IAAI,CAACE,MAAV,EAAkB;AAChBC,MAAAA,gBAAgB,CAACF,KAAD,CAAhB;AACD;;AAED,QAAID,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnBC,MAAAA,gBAAgB,CAACF,KAAD,CAAhB;;AACAG,4BAASC,OAAT;;AACA,aAAOC,UAAU,CAACN,IAAD,CAAjB;AACD;;AAED,QAAIA,IAAJ,EAAU;AACRd,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAE,oBADC;AAEPC,QAAAA,OAAO,EAAE;AACPW,UAAAA,IADO;AAEPC,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOAM,MAAAA,UAAU,CAACN,KAAK,GAAG,CAAT,CAAV;AACD;;AAED,QAAIA,KAAK,KAAK3B,cAAc,GAAG,CAA3B,IAAgC0B,IAApC,EAA0C;AACxCI,4BAASC,OAAT;AACD;AACF,GAzBD;;AA2BA,QAAMG,gBAAgB,GAAG,CAACR,IAAD,EAAeC,KAAf,KAAiC;AACxD,QACGrD,sBAASC,EAAT,KAAgB,SAAhB,IAA6B,CAACoC,aAA/B,IACA;AACCrC,0BAASC,EAAT,KAAgB,KAAhB,IAAyBmD,IAAI,CAACE,MAAL,GAAc,CAH1C,EAIE;AACAH,MAAAA,qBAAqB,CAACC,IAAD,EAAOC,KAAP,CAArB;AACD;AACF,GARD;;AAUA,QAAMQ,cAAc,GAAG,CACrB;AACEC,IAAAA,WAAW,EAAE;AAAEC,MAAAA;AAAF;AADf,GADqB,EAIrBV,KAJqB,KAKlB;AACHF,IAAAA,qBAAqB,CAACY,GAAG,KAAK,WAAR,GAAsB,EAAtB,GAA2BA,GAA5B,EAAiCV,KAAjC,CAArB;AAEA,QAAIrD,sBAASC,EAAT,KAAgB,SAAhB,IAA6B,CAACoC,aAA9B,IAA+C,CAAC2B,KAAK,CAAC9D,QAAQ,CAAC6D,GAAD,CAAT,CAAzD,EACEzB,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAE;AAArC,KAAD,CAAR;AACH,GAVD;;AAYA,QAAMkB,UAAU,GAAG,wBAChBN,KAAD,IAAyB;AACvB,QAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG3B,cAA1B,EAA0C;AAAA;;AACxC,YAAMmB,KAAK,GAAGV,MAAM,CAACQ,OAAP,CAAeU,KAAf,CAAd;AACAR,MAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEF,OAAP,oEAAgBM,KAAhB;AACD;AACF,GANgB,EAOjB,CAACvB,cAAD,CAPiB,CAAnB;AAUA,QAAM6B,gBAAgB,GAAG,wBACtBU,UAAD,IAAwB;AAAA;;AACtB,UAAMpB,KAAK,GAAGV,MAAM,CAACQ,OAAP,CAAesB,UAAf,CAAd;AACApB,IAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEF,OAAP,oEAAgBG,KAAhB;AACAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAE;AACPY,QAAAA,KAAK,EAAEY,UADA;AAEPb,QAAAA,IAAI,EAAE;AAFC;AAFF,KAAD,CAAR;AAOAO,IAAAA,UAAU,CAACM,UAAU,GAAG,CAAd,CAAV;AACD,GAZsB,EAavB,CAACN,UAAD,CAbuB,CAAzB;AAgBA,QAAMD,UAAU,GAAG,wBAChBQ,IAAD,IAAkB;AAChB5B,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAE;AAAEf,QAAAA,cAAF;AAAkBwC,QAAAA;AAAlB;AAFF,KAAD,CAAR;AAID,GANgB,EAOjB,CAACxC,cAAD,CAPiB,CAAnB;AAUA,QAAMyC,kBAAkB,GAAG,wBAAY,YAA2B;AAChE,UAAMC,UAAU,GAAG,MAAMrB,mBAAUsB,SAAV,EAAzB;AACA,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcpC,OAAd,EAAuBqC,IAAvB,CAA4B,EAA5B,CAArB;;AAEA,QACEL,UAAU,IACVA,UAAU,CAACd,MAAX,KAAsB5B,cADtB,IAEA0C,UAAU,KAAKE,YAFf,IAGAF,UAAU,KAAKlC,kBAAkB,CAACS,OAJpC,EAKE;AACAT,MAAAA,kBAAkB,CAACS,OAAnB,GAA6ByB,UAA7B;AACAV,MAAAA,UAAU,CAACU,UAAD,CAAV;AACD;AACF,GAb0B,EAaxB,CAACV,UAAD,EAAahC,cAAb,EAA6BU,OAA7B,CAbwB,CAA3B;AAeA,wBAAU,MAAM;AACd,QAAIsC,QAAJ;;AAEA,QAAI7D,qBAAJ,EAA2B;AACzB6D,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BR,QAAAA,kBAAkB;AACnB,OAFqB,EAEnBrD,0BAFmB,CAAtB;AAGD;;AAED,WAAO,MAAM;AACX8D,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAFD;AAGD,GAZD,EAYG,CACD7D,qBADC,EAEDC,0BAFC,EAGDqD,kBAHC,EAIDzC,cAJC,CAZH;;AAmBA,QAAMmD,YAAY,GAAG,MAA0B;AAC7C,UAAMC,cAAc,GAAGC,KAAK,CAASrD,cAAT,CAAL,CAA8BsD,IAA9B,CAAmC,CAAnC,CAAvB;AAEA,WAAOF,cAAc,CAACG,GAAf,CAAmB,CAACC,CAAD,EAAI7B,KAAJ,KAAc;AACtC,UAAIY,UAAU,GAAGZ,KAAjB;;AACA,UAAI7B,KAAJ,EAAW;AACTyC,QAAAA,UAAU,GAAGvC,cAAc,GAAG,CAAjB,GAAqB2B,KAAlC;AACD;;AACD,YAAM8B,UAAU,GAAG/C,OAAO,CAAE,GAAE6B,UAAW,EAAf,CAA1B;;AAEA,UAAI,CAAC9B,MAAM,CAACQ,OAAP,CAAesB,UAAf,CAAL,EAAiC;AAC/B9B,QAAAA,MAAM,CAACQ,OAAP,CAAesB,UAAf,iBAA6BmB,eAAMC,SAAN,EAA7B;AACD;;AAED,0BACE,6BAAC,iBAAD;AACE,QAAA,cAAc,EAAEtE,cADlB;AAEE,QAAA,gBAAgB,EAAEC,gBAFpB;AAGE,QAAA,UAAU,EAAEqC,KAAK,KAAK,CAHxB;AAIE,QAAA,WAAW,EAAEnC,WAJf;AAKE,QAAA,cAAc,EACZoE,aADc,IAEXzB,cAAc,CAACyB,aAAD,EAAgBrB,UAAhB,CAPrB;AAQE,QAAA,gBAAgB,EAAGb,IAAD,IAChBQ,gBAAgB,CAACR,IAAD,EAAOa,UAAP,CATpB;AAWE,QAAA,oBAAoB,EAAE3C,oBAXxB;AAYE,QAAA,WAAW,EAAEC,WAZf;AAaE,QAAA,UAAU,EAAE4D,UAbd;AAcE,QAAA,GAAG,EAAElB,UAdP;AAeE,QAAA,YAAY,EAAExC,YAfhB;AAgBE,QAAA,SAAS,EAAEzB,sBAASuF,MAAT,CAAgB;AACzBC,UAAAA,OAAO,EAAE,CADgB;AAEzBC,UAAAA,GAAG,EAAEpC,KAAK,KAAK,CAAV,GAAc3B,cAAd,GAA+B;AAFX,SAAhB,CAhBb;AAoBE,QAAA,cAAc,EAAEA,cApBlB;AAqBE,QAAA,WAAW,EAAEC,WArBf;AAsBE,QAAA,GAAG,EAAEQ,MAAM,CAACQ,OAAP,CAAesB,UAAf,CAtBP;AAuBE,QAAA,eAAe,EAAErC,eAvBnB;AAwBE,QAAA,iBAAiB,EAAEC,iBAxBrB;AAyBE,QAAA,MAAM,EAAG,GAAEE,YAAa,IAAGkC,UAAW;AAzBxC,SA0BMjC,SA1BN,EADF;AA8BD,KAzCM,CAAP;AA0CD,GA7CD;;AA+CA,sBAAO,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEF,KAAK,IAAI1B,MAAM,CAACG;AAA7B,KAAyCsE,YAAY,EAArD,CAAP;AACD,CAhOe,CAAlB;eAoOejE,S","sourcesContent":["import Clipboard from '@react-native-clipboard/clipboard';\nimport React, {\n  RefObject,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  Keyboard,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport OtpInput from './OtpInput';\nimport { OtpInputsRef, SupportedKeyboardType } from './types';\nimport { fillOtpCode } from './helpers';\nimport reducer from './reducer';\n\nconst supportAutofillFromClipboard =\n  Platform.OS === 'android' || parseInt(Platform.Version as string, 10) < 14;\n\ntype Props = TextInputProps & {\n  autofillFromClipboard: boolean;\n  autofillListenerIntervalMS?: number;\n  keyboardType?: SupportedKeyboardType;\n  style?: StyleProp<ViewStyle>;\n  focusStyles?: StyleProp<ViewStyle>;\n  defaultValue?: string;\n  handleChange: (otpCode: string) => void;\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  isRTL?: boolean;\n  numberOfInputs: number;\n  testIDPrefix?: string;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n});\n\nconst OtpInputs = forwardRef<OtpInputsRef, Props>(\n  (\n    {\n      autofillFromClipboard = supportAutofillFromClipboard,\n      autofillListenerIntervalMS = 1000,\n      autoCapitalize = 'none',\n      clearTextOnFocus = false,\n      defaultValue,\n      focusStyles,\n      handleChange = console.log,\n      inputContainerStyles,\n      inputStyles,\n      isRTL = false,\n      keyboardType = 'phone-pad',\n      numberOfInputs = 4,\n      placeholder = '',\n      secureTextEntry = false,\n      selectTextOnFocus = true,\n      style,\n      testIDPrefix = 'otpInput',\n      ...restProps\n    },\n    ref,\n  ) => {\n    const previousCopiedText = useRef<string>('');\n    const inputs = useRef<Array<RefObject<TextInput>>>([]);\n    const [{ otpCode, hasKeySupport }, dispatch] = useReducer(\n      reducer,\n      {},\n      () => ({\n        otpCode: fillOtpCode(numberOfInputs, defaultValue),\n        handleChange,\n        hasKeySupport: Platform.OS === 'ios',\n      }),\n    );\n\n    useEffect(() => {\n      dispatch({ type: 'setHandleChange', payload: handleChange });\n    }, [handleChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        reset: (): void => {\n          dispatch({ type: 'clearOtp', payload: numberOfInputs });\n          inputs.current.forEach((input) => input?.current?.clear());\n          previousCopiedText.current = '';\n          Clipboard.setString('');\n        },\n        focus: (): void => {\n          const firstInput = inputs.current[0];\n          firstInput?.current?.focus();\n        },\n      }),\n      [numberOfInputs],\n    );\n\n    const handleInputTextChange = (text: string, index: number): void => {\n      if (!text.length) {\n        handleClearInput(index);\n      }\n\n      if (text.length > 1) {\n        handleClearInput(index);\n        Keyboard.dismiss();\n        return fillInputs(text);\n      }\n\n      if (text) {\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            text,\n            index,\n          },\n        });\n        focusInput(index + 1);\n      }\n\n      if (index === numberOfInputs - 1 && text) {\n        Keyboard.dismiss();\n      }\n    };\n\n    const handleTextChange = (text: string, index: number) => {\n      if (\n        (Platform.OS === 'android' && !hasKeySupport) ||\n        // Pasted from input accessory\n        (Platform.OS === 'ios' && text.length > 1)\n      ) {\n        handleInputTextChange(text, index);\n      }\n    };\n\n    const handleKeyPress = (\n      {\n        nativeEvent: { key },\n      }: NativeSyntheticEvent<TextInputKeyPressEventData>,\n      index: number,\n    ) => {\n      handleInputTextChange(key === 'Backspace' ? '' : key, index);\n\n      if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key)))\n        dispatch({ type: 'setHasKeySupport', payload: true });\n    };\n\n    const focusInput = useCallback(\n      (index: number): void => {\n        if (index >= 0 && index < numberOfInputs) {\n          const input = inputs.current[index];\n          input?.current?.focus();\n        }\n      },\n      [numberOfInputs],\n    );\n\n    const handleClearInput = useCallback(\n      (inputIndex: number) => {\n        const input = inputs.current[inputIndex];\n        input?.current?.clear();\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            index: inputIndex,\n            text: '',\n          },\n        });\n        focusInput(inputIndex - 1);\n      },\n      [focusInput],\n    );\n\n    const fillInputs = useCallback(\n      (code: string) => {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code },\n        });\n      },\n      [numberOfInputs],\n    );\n\n    const listenOnCopiedText = useCallback(async (): Promise<void> => {\n      const copiedText = await Clipboard.getString();\n      const otpCodeValue = Object.values(otpCode).join('');\n\n      if (\n        copiedText &&\n        copiedText.length === numberOfInputs &&\n        copiedText !== otpCodeValue &&\n        copiedText !== previousCopiedText.current\n      ) {\n        previousCopiedText.current = copiedText;\n        fillInputs(copiedText);\n      }\n    }, [fillInputs, numberOfInputs, otpCode]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (autofillFromClipboard) {\n        interval = setInterval(() => {\n          listenOnCopiedText();\n        }, autofillListenerIntervalMS);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [\n      autofillFromClipboard,\n      autofillListenerIntervalMS,\n      listenOnCopiedText,\n      numberOfInputs,\n    ]);\n\n    const renderInputs = (): Array<JSX.Element> => {\n      const iterationArray = Array<number>(numberOfInputs).fill(0);\n\n      return iterationArray.map((_, index) => {\n        let inputIndex = index;\n        if (isRTL) {\n          inputIndex = numberOfInputs - 1 - index;\n        }\n        const inputValue = otpCode[`${inputIndex}`];\n\n        if (!inputs.current[inputIndex]) {\n          inputs.current[inputIndex] = React.createRef<TextInput>();\n        }\n\n        return (\n          <OtpInput\n            autoCapitalize={autoCapitalize}\n            clearTextOnFocus={clearTextOnFocus}\n            firstInput={index === 0}\n            focusStyles={focusStyles}\n            handleKeyPress={(\n              keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>,\n            ) => handleKeyPress(keyPressEvent, inputIndex)}\n            handleTextChange={(text: string) =>\n              handleTextChange(text, inputIndex)\n            }\n            inputContainerStyles={inputContainerStyles}\n            inputStyles={inputStyles}\n            inputValue={inputValue}\n            key={inputIndex}\n            keyboardType={keyboardType}\n            maxLength={Platform.select({\n              android: 1,\n              ios: index === 0 ? numberOfInputs : 1,\n            })}\n            numberOfInputs={numberOfInputs}\n            placeholder={placeholder}\n            ref={inputs.current[inputIndex]}\n            secureTextEntry={secureTextEntry}\n            selectTextOnFocus={selectTextOnFocus}\n            testID={`${testIDPrefix}-${inputIndex}`}\n            {...restProps}\n          />\n        );\n      });\n    };\n\n    return <View style={style || styles.container}>{renderInputs()}</View>;\n  },\n);\n\nexport { OtpInputsRef };\nexport default OtpInputs;\n"]}